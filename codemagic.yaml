workflows:
  react-native-ios-prod:
    name: iOS Production Pipeline
    instance_type: mac_mini_m1
    environment:
      groups:
        - ios_certificates  # 需在Codemagic后台配置证书组
      vars:
        APP_ID: "00008110-0004513A3686201E"  # 替换实际Bundle ID
        SCHEME_NAME: "JuZi"       # 替换实际Scheme名称
        RUBY_VERSION: "3.3.0"
        COCOAPODS_VERSION: "1.15.2"
    scripts:
      # ========== 环境初始化阶段 ==========
      - name: Initialize Environment
        script: |
          # 清理残留文件
          rm -rf ~/.rbenv
          rm -rf ~/.gem
          brew cleanup --prune=all
          
          # 配置基础路径
          export HOMEBREW_PREFIX="/opt/homebrew"
          export PATH="$HOMEBREW_PREFIX/bin:$PATH"
          echo "export PATH='$HOMEBREW_PREFIX/bin:$PATH'" >> ~/.zshrc

      # ========== 依赖安装阶段 ==========
      - name: Install System Dependencies
        script: |
          # 安装核心依赖（使用Apple Silicon原生编译）
          arch -arm64 brew update-reset
          arch -arm64 brew install \
            openssl@3 \
            readline \
            libyaml \
            libffi \
            autoconf \
            bison

          # 配置动态库路径
          echo "export LDFLAGS='-L$HOMEBREW_PREFIX/opt/libffi/lib -L$HOMEBREW_PREFIX/opt/openssl@3/lib'" >> ~/.zshrc
          echo "export CPPFLAGS='-I$HOMEBREW_PREFIX/opt/libffi/include -I$HOMEBREW_PREFIX/opt/openssl@3/include'" >> ~/.zshrc
          echo "export PKG_CONFIG_PATH='$HOMEBREW_PREFIX/opt/libffi/lib/pkgconfig:$HOMEBREW_PREFIX/opt/openssl@3/lib/pkgconfig'" >> ~/.zshrc
          source ~/.zshrc

      # ========== Ruby环境配置 ==========
      - name: Setup Ruby
        script: |
          # 安装rbenv（强制覆盖）
          git clone https://github.com/rbenv/rbenv.git ~/.rbenv --depth 1 || (cd ~/.rbenv && git pull)
          echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.zshrc
          echo 'eval "$(rbenv init -)"' >> ~/.zshrc
          source ~/.zshrc

          # 安装最新ruby-build插件
          mkdir -p ~/.rbenv/plugins
          rm -rf ~/.rbenv/plugins/ruby-build
          git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build --depth 1

          # 编译参数配置
          export RUBY_CONFIGURE_OPTS="\
            --with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl@3 \
            --with-libffi-dir=$HOMEBREW_PREFIX/opt/libffi \
            --enable-shared \
            --disable-install-doc"

          # 安装Ruby（带调试日志）
          rbenv install $RUBY_VERSION -v 2>&1 | tee ruby_build.log
          
          # 错误分析
          if [ $? -ne 0 ]; then
            echo "❌ Ruby安装失败，关键错误信息："
            grep -iE 'error:|undefined symbol|_rb_' ruby_build.log | grep -vE 'doc|locale|warning'
            exit 1
          fi

          rbenv global $RUBY_VERSION
          
          # 验证环境
          ruby -v
          ruby -ropenssl -e "puts OpenSSL::OPENSSL_VERSION"

      # ========== Cocoapods配置 ==========
      - name: Setup Cocoapods
        script: |
          # 独立Gem环境
          export GEM_HOME="$HOME/.gem"
          export GEM_PATH="$GEM_HOME"
          export PATH="$GEM_HOME/bin:$PATH"
          echo "export PATH='$GEM_HOME/bin:$PATH'" >> ~/.zshrc
          
          # 安装Bundler
          gem install bundler --no-document
          
          # 安装指定版本Cocoapods
          gem install cocoapods -v $COCOAPODS_VERSION \
            -- --with-ldflags="-L$HOMEBREW_PREFIX/opt/libffi/lib" \
               --with-cppflags="-I$HOMEBREW_PREFIX/opt/libffi/include" \
               --no-document
          
          # 验证安装
          pod --version | grep $COCOAPODS_VERSION || exit 1

      # ========== 项目构建阶段 ==========
      - name: Build iOS Project
        script: |
          cd ios
          
          # 安装项目依赖
          pod install --repo-update || { 
            echo "❌ Pod安装失败，尝试清除缓存重试..."; 
            rm -rf Pods Podfile.lock;
            pod install --repo-update || exit 1;
          }

          # 清理构建缓存
          xcodebuild clean \
            -workspace "$SCHEME_NAME.xcworkspace" \
            -scheme "$SCHEME_NAME" \
            -quiet

          # 归档项目（带详细日志）
          xcodebuild archive \
            -workspace "$SCHEME_NAME.xcworkspace" \
            -scheme "$SCHEME_NAME" \
            -archivePath "$CM_BUILD_DIR/build/$SCHEME_NAME.xcarchive" \
            -destination "generic/platform=iOS" \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$IOS_PROVISIONING_PROFILE" \
            DEVELOPMENT_TEAM="$IOS_DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$APP_ID" \
            | xcpretty

          # 导出IPA
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/build/$SCHEME_NAME.xcarchive" \
            -exportOptionsPlist "ExportOptions.plist" \
            -exportPath "$CM_BUILD_DIR/build/artifacts" \
            | xcpretty

      # ========== 构建验证阶段 ==========
      - name: Verify Build
        script: |
          # 检查产物存在性
          if [ ! -f "$CM_BUILD_DIR/build/artifacts/$SCHEME_NAME.ipa" ]; then
            echo "❌ IPA文件未生成"
            exit 1
          fi

          # 检查签名状态
          codesign -dv --verbose=4 "$CM_BUILD_DIR/build/artifacts/$SCHEME_NAME.ipa" || exit 1

    artifacts:
      - build/artifacts/**/*.ipa
    caching:
      paths:
        - ~/.rbenv
        - ~/.gem
        - ios/Pods
    publishing:
      email:
        recipients:
          - dev-team@1876122538@qq.com
